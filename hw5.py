import json
import pathlib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Union

BAD_TYPE_MESSAGE = "Invalid input: ({value})! Only pathlib.Path and strings are accepted."
DIRECTORY_NOT_EXISTING_MESSAGE = "Invalide input: ({value})! Directory doesn't exist."


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        pathlib_input = isinstance(data_fname, pathlib.Path)
        str_input = isinstance(data_fname, str)
        if not (pathlib_input or str_input):
            raise TypeError(BAD_TYPE_MESSAGE.format(value=data_fname))
        elif not pathlib.Path(data_fname).exists():
            raise ValueError(
                DIRECTORY_NOT_EXISTING_MESSAGE.format(value=data_fname))
        else:
            self.data_fname = pathlib.Path(data_fname)

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)


# Q1

    def show_age_distrib(self) -> tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
    Number of people in a given bin
    bins : np.ndarray
    Bin edges
        """
        age = self.data.age.replace('nan', np.nan)
        age = age.dropna()
        hist, bins, bars = plt.hist(age, bins=range(0, 110, 10))
        plt.show()
        return(hist, bins)


# Q2

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows
    removed and the (ordinal) index after a reset.
        """

        df = self.data.loc[self.data['email'].str.contains('@', na=False)].copy()
        df = df.loc[df['email'].str.contains('.', na=False, regex=False)].copy()
        df = df.loc[~df['email'].str.startswith('@.', na=False)].copy()
        df = df.loc[~df['email'].str.endswith('@.', na=False)].copy()
        df = df.loc[~df['email'].str.contains('@.', na=False, regex=False)].copy()
        df = df.loc[df['email'].str.count('@.') == 1].copy()

        df = df.reset_index(drop=True)

        return df

# Q3

    def fill_na_with_mean(self) -> tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
    The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
        Row indices of the students that their new grades were generated
        """

        df = self.data.replace('nan', np.nan)
        arr = [index for index, row in df[['q1', 'q2', 'q3', 'q4', 'q5']].iterrows()
               if row.isnull().any()]
        df = df.T.fillna(
            df[['q1', 'q2', 'q3', 'q4', 'q5']].mean(axis=1)).T
        return(df, arr)


# Q4


    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades,
        the score should be NA. Otherwise, the score is simply the mean of the
        other grades.
        The datatype of score is UInt8, and the floating point raw numbers
        should be rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = self.data.replace('nan', np.nan)
        score = np.empty_like(df.q1)
        for index, row in df[['q1', 'q2', 'q3', 'q4', 'q5']].iterrows():
            if sum(row.isnull()) >= 2:
                score[index] = np.nan
            else:
                score[index] = np.floor(np.nanmean(row))
        df['score'] = pd.Series(score.tolist(), dtype='UInt8')

        return(df)


# Q5 Bonus

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        df = self.data.replace('nan', np.nan)
        df = df.dropna(subset=['age'])
        df['age'] = df.age > 40
        df = df.set_index(['gender', 'age'], append=True)
        df = df[['q1', 'q2', 'q3', 'q4', 'q5']]
        df = df.groupby(level=['gender', 'age'])
        df = df.aggregate(np.nanmean)

        return(df)
